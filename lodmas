import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;

@Service
public class CouponService {

    // ... otros métodos ...

    public void processCsvMassiveLoad(MultipartFile file) {
        try {
            InputStream inputStream = file.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));

            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                if (values.length != 5) {
                    System.err.println("Fila incorrecta en archivo CSV: " + line);
                    continue;
                }

                GenerateCouponDTO generateCouponDTO = createGenerateCouponDTOFromCsvRow(values);
                try {
                    generateCoupon(generateCouponDTO);
                } catch (MiExcepcion e) {
                    System.err.println("Error al generar cupón desde CSV: " + e.getMessage());
                }
            }

            br.close();
            inputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Error al procesar el archivo CSV.", e);
        }
    }

    private GenerateCouponDTO createGenerateCouponDTOFromCsvRow(String[] values) {
        GenerateCouponDTO generateCouponDTO = new GenerateCouponDTO();
        generateCouponDTO.setRut(values[0]);
        generateCouponDTO.setStock(Integer.parseInt(values[1]));
        generateCouponDTO.setDescuento(Integer.parseInt(values[2]));
        // ... parsear fechas y completar el DTO ...
        return generateCouponDTO;
    }
}

==============================

public class FileUtil {

    public static FileType getFileType(String fileName) {
        String extension = getFileExtension(fileName);
        if (extension != null) {
            switch (extension.toLowerCase()) {
                case "xlsx":
                case "xls":
                    return FileType.EXCEL;
                case "csv":
                    return FileType.CSV;
            }
        }
        return FileType.UNKNOWN;
    }

    private static String getFileExtension(String fileName) {
        int lastDotIndex = fileName.lastIndexOf(".");
        if (lastDotIndex > 0 && lastDotIndex < fileName.length() - 1) {
            return fileName.substring(lastDotIndex + 1);
        }
        return null;
    }

    public enum FileType {
        EXCEL,
        CSV,
        UNKNOWN
    }
}
