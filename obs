import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class RandomUtilTest {

    @Test
    public void testGenerate() {
        String randomString = RandomUtil.generate();

        assertNotNull(randomString);
        assertEquals(2, randomString.length()); // The generated string should have length 2 (1 letter + 1 number)
        assertTrue(Character.isLetter(randomString.charAt(0))); // The first character should be a letter
        assertTrue(Character.isDigit(randomString.charAt(1))); // The second character should be a digit
    }

    @Test
    public void testGenerateMockRandom() {
        Random mockRandom = mock(Random.class);
        when(mockRandom.ints(anyInt(), anyInt())).thenReturn(IntStream.of(100, 50)); // Mock the random values

        String randomString = RandomUtil.generate();

        assertEquals("2b", randomString); // The expected string based on the mocked values
        verify(mockRandom, times(1)).ints(anyInt(), anyInt()); // Verify that the random generation was called once
    }
}

===============================

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CouponMassiveLoadServiceTest {

    @Mock
    private CouponService couponService;

    private CouponMassiveLoadService couponMassiveLoadService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        couponMassiveLoadService = new CouponMassiveLoadService();
        couponMassiveLoadService.setCouponService(couponService);
    }

    @Test
    public void testProcessMassiveLoad_Success() throws IOException, GenerateCouponException {
        MultipartFile mockFile = new MockMultipartFile("test.xlsx", new byte[0]);
        List<GenerateCouponDTO> mockItemsToLoad = new ArrayList<>();
        mockItemsToLoad.add(new GenerateCouponDTO());

        when(couponService.generateCoupon(any(GenerateCouponDTO.class))).thenReturn(new Coupon());

        MassiveLoadResponseDTO response = couponMassiveLoadService.processMassiveLoad(mockFile);

        assertTrue(response.isSuccess());
        verify(couponService, times(1)).generateCoupon(any(GenerateCouponDTO.class));
    }

    @Test
    public void testProcessMassiveLoad_FailureReadingFile() throws IOException {
        MultipartFile mockFile = new MockMultipartFile("test.xlsx", new byte[0]);
        
        when(couponService.generateCoupon(any(GenerateCouponDTO.class))).thenReturn(new Coupon());

        MassiveLoadResponseDTO response = couponMassiveLoadService.processMassiveLoad(mockFile);

        assertFalse(response.isSuccess());
        assertEquals("Error leyendo el archivo fuente", response.getErrorMessage());
        verify(couponService, never()).generateCoupon(any(GenerateCouponDTO.class));
    }

    // More test cases can be added to cover other scenarios such as validation failure, etc.
}

=====================================
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CouponMassiveLoadControllerTest {

    @Mock
    private CouponMassiveLoadService massiveLoadService;

    private CouponMassiveLoadController controller;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        controller = new CouponMassiveLoadController(massiveLoadService);
    }

    @Test
    public void testMassiveLoad_Success() {
        MultipartFile mockFile = new MockMultipartFile("test.xlsx", new byte[0]);
        MassiveLoadResponseDTO mockResponse = new MassiveLoadResponseDTO();
        mockResponse.setSuccess(true);

        when(massiveLoadService.processMassiveLoad(mockFile)).thenReturn(mockResponse);

        ResponseEntity<MassiveLoadResponseDTO> responseEntity = controller.massiveLoad(mockFile);

        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertSame(mockResponse, responseEntity.getBody());
    }

    @Test
    public void testMassiveLoad_Failure() {
        MultipartFile mockFile = new MockMultipartFile("test.xlsx", new byte[0]);
        MassiveLoadResponseDTO mockResponse = new MassiveLoadResponseDTO();
        mockResponse.setSuccess(false);

        when(massiveLoadService.processMassiveLoad(mockFile)).thenReturn(mockResponse);

        ResponseEntity<MassiveLoadResponseDTO> responseEntity = controller.massiveLoad(mockFile);

        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        assertSame(mockResponse, responseEntity.getBody());
    }
}

